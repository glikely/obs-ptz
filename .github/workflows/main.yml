name: 'CI Multiplatform Build'

on:
  push:
    paths-ignore:
      - '**.md'
    branches:
      - main
      - ci-test
    tags:
      - '*'
  pull_request:
    paths-ignore:
      - '**.md'
    branches:
      - main

jobs:
  ubuntu64:
    name: 'Linux/Ubuntu 64-bit'
    runs-on: [ubuntu-20.04]
    env:
      OBS_VERSION: '27.0.0'
      LibObs_Dir: "${{ github.workspace }}/obs-studio"
    steps:
      - name: 'Checkout OBS PTZ'
        uses: actions/checkout@v2.3.3
        with:
          path: obs-ptz
      - name: 'Fetch Git Tags'
        working-directory: ${{github.workspace}}/obs-ptz
        shell: bash
        run: |
          git fetch --prune --unshallow
          echo "OBS_PTZ_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "OBS_PTZ_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "OBS_PTZ_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
      - name: Install Prerequisites (Apt)
        shell: bash
        run: |
          sudo dpkg --add-architecture amd64
          sudo apt-get -qq update
          sudo apt-get install -y \
                 build-essential \
                 cmake \
                 git \
                 checkinstall \
                 libmbedtls-dev \
                 libasound2-dev \
                 libavcodec-dev \
                 libavdevice-dev \
                 libavfilter-dev \
                 libavformat-dev \
                 libavutil-dev \
                 libcurl4-openssl-dev \
                 libfdk-aac-dev \
                 libfontconfig-dev \
                 libfreetype6-dev \
                 libglvnd-dev \
                 libjack-jackd2-dev \
                 libjansson-dev \
                 libluajit-5.1-dev \
                 libpulse-dev \
                 libqt5x11extras5-dev \
                 libspeexdsp-dev \
                 libswresample-dev \
                 libswscale-dev \
                 libudev-dev \
                 libv4l-dev \
                 libvlc-dev \
                 libwayland-dev \
                 libx11-dev \
                 libx264-dev \
                 libxcb-shm0-dev \
                 libxcb-xinerama0-dev \
                 libxcomposite-dev \
                 libxinerama-dev \
                 pkg-config \
                 python3-dev \
                 qtbase5-dev \
                 qtbase5-private-dev \
                 libqt5svg5-dev \
                 swig \
                 libxcb-randr0-dev \
                 libxcb-xfixes0-dev \
                 libx11-xcb-dev \
                 libxcb1-dev \
                 libxss-dev \
                 qtwayland5 \
                 libgles2-mesa \
                 libgles2-mesa-dev \
                 libqt5gamepad5-dev \
                 libqt5serialport5-dev
      - name: 'Restore pre-built OBS Studio from cache'
        id: obs-cache
        uses: actions/cache@v2.1.2
        env:
          CACHE_NAME: 'obs-studio-cache'
        with:
          path: ${{ github.workspace }}/obs-studio
          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.OBS_VERSION }}
      - name: 'Checkout OBS Studio'
        if: steps.obs-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2.3.3
        with:
          submodules: 'recursive'
          repository: 'obsproject/obs-studio'
          path: obs-studio
          ref: ${{ env.OBS_VERSION }}
      - name: 'Configure OBS'
        if: steps.obs-cache.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace}}/obs-studio
        run: |
          mkdir ./build
          cd ./build
          cmake -DUNIX_STRUCTURE=1 -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_PIPEWIRE=OFF -DBUILD_BROWSER=FALSE -DBUILD_VST=OFF ..
      - name: 'Build OBS'
        if: steps.obs-cache.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace}}/obs-studio/build
        run: |
          make -j4
          sudo checkinstall --default --pkgname=obs-studio --fstrans=no --backup=no --pkgversion="${{ env.OBS_VERSION }}-git" --deldoc=yes
      - name: 'Install OBS'
        working-directory: ${{ github.workspace}}/obs-studio/build
        run: sudo dpkg -i obs-studio_${{ env.OBS_VERSION}}-git-1_amd64.deb
      - name: 'Configure OBS PTZ'
        working-directory: ${{ github.workspace }}/obs-ptz
        run: |
          mkdir ./build
          cd ./build
          cmake ..
      - name: 'Build OBS PTZ'
        working-directory: ${{ github.workspace }}/obs-ptz/build
        run: make
  win64:
    name: 'Windows 64-bit'
    runs-on: [windows-2019]
    env:
      QT_VERSION: '5.15.2'
      QTDIR32: "${{ github.workspace }}/cmbuild/QT/5.15.2/msvc2019"
      QTDIR64: "${{ github.workspace }}/cmbuild/QT/5.15.2/msvc2019_64"
      CMAKE_GENERATOR: "Visual Studio 16 2019"
      CMAKE_SYSTEM_VERSION: "10.0.18363.657"
      WINDOWS_DEPS_VERSION: '2019'
      WINDOWS_DEPS_CACHE_VERSION: '1'
      OBS_VERSION: '27.1.1'
      OBSPath: "${{ github.workspace }}/obs-studio"
      build_config: RelWithDebInfo
    steps:
      - name: 'Add msbuild to PATH'
        uses: microsoft/setup-msbuild@v1.1
      - name: 'Checkout OBS PTZ'
        uses: actions/checkout@v2.3.3
        with:
          path: obs-ptz
      - name: 'Fetch Git Tags'
        working-directory: ${{ github.workspace}}/obs-ptz
        shell: bash
        run: |
          git fetch --prune --unshallow
          echo "OBS_PTZ_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "OBS_PTZ_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "OBS_PTZ_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
      - name: 'Restore QT dependency from cache'
        id: qt-jurplel-cache
        uses: actions/cache@v2.1.2
        env:
          CACHE_NAME: 'windows-qt-jurplel-cache'
        with:
          path: ${{ github.workspace }}/cmbuild/QT
          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.QT_VERSION }}
      - name: 'Restore pre-built dependencies from cache'
        id: deps-cache
        uses: actions/cache@v2.1.2
        env:
          CACHE_NAME: 'windows-deps-cache'
        with:
          path: ${{ github.workspace }}/cmbuild/deps
          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.WINDOWS_DEPS_VERSION }}-${{ env.WINDOWS_DEPS_CACHE_VERSION }}
      - name: 'Restore pre-built OBS Studio from cache'
        id: obs-cache
        uses: actions/cache@v2.1.2
        env:
          CACHE_NAME: 'obs-studio-cache'
        with:
          path: ${{ github.workspace }}/obs-studio
          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.OBS_VERSION }}
      - name: 'Install prerequisite: QT'
        uses: jurplel/install-qt-action@v2
        with:
          version: 5.15.2
          arch: win64_msvc2019_64
          dir: ${{ github.workspace }}/cmbuild/
          modules: debug_info
          cached: ${{ steps.qt-jurplel-cache.outputs.cache-hit }}
      - name: 'Install prerequisite: Pre-built dependencies'
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: |
          curl -kLO https://cdn-fastly.obsproject.com/downloads/dependencies${{ env.WINDOWS_DEPS_VERSION }}.zip -f --retry 5 -C -
          7z x dependencies${{ env.WINDOWS_DEPS_VERSION }}.zip -o"${{ github.workspace }}/cmbuild/deps"
      - name: 'Checkout OBS Studio'
        if: steps.obs-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2.3.3
        with:
          submodules: 'recursive'
          repository: 'obsproject/obs-studio'
          path: obs-studio
          ref: ${{ env.OBS_VERSION }}
      - name: 'Configure OBS'
        if: steps.obs-cache.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace}}/obs-studio
        run: |
          mkdir ./build64
          cd ./build64
          cmake -G"${{ env.CMAKE_GENERATOR }}" -A"x64" -DCMAKE_SYSTEM_VERSION="${{ env.CMAKE_SYSTEM_VERSION }}" -DDepsPath="${{ github.workspace }}/cmbuild/deps/win64" -DQTDIR="${{ env.QTDIR64 }}" -DDISABLE_PLUGINS=true -DCOPIED_DEPENDENCIES=FALSE -DCOPY_DEPENDENCIES=TRUE -DBUILD_BROWSER=FALSE ..
      - name: 'Build OBS'
        if: steps.obs-cache.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace}}/obs-studio
        run: msbuild /m /p:Configuration=RelWithDebInfo .\build64\obs-studio.sln
      - name: 'Configure OBS PTZ'
        working-directory: ${{ github.workspace }}/obs-ptz
        run: ./ci/windows/prepare-windows.cmd
      - name: 'Build OBS PTZ'
        working-directory: ${{ github.workspace }}/obs-ptz
        run: msbuild /m /p:Configuration=RelWithDebInfo .\build64\ptz-controls.sln
      - name: 'Package'
        working-directory: ${{ github.workspace }}/obs-ptz
        if: success() && (github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1')
        run: ./ci/windows/package-windows.cmd
      - name: 'Publish'
        if: success() && (github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1')
        uses: actions/upload-artifact@v2.2.0
        with:
          name: 'ptz-controls-${{ env.OBS_PTZ_HASH }}-Windows.zip'
          path: 'obs-ptz/package/'
      - name: 'Publish Installer'
        if: success() && (github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1')
        uses: actions/upload-artifact@v2.2.0
        with:
          name: 'ptz-controls-${{ env.OBS_PTZ_HASH }}-Windows-Installer.exe'
          path: 'obs-ptz/package/'
